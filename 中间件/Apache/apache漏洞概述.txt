apache 简介：

Apache 是世界使用排名第一的Web 服务器软件。它可以运行在几乎所有广泛使用的 计算机平台上，由于其 跨平台 和安全性被广泛使用，是最流行的Web服务器端软件之一。它快速、可靠并且可通过简单的API扩充，将 Perl/ Python等 解释器编译到服务器中。

一、多后缀名解析漏洞
Apache文件解析漏洞与用户的配置有密切的关系，严格来说属于用户配置问题。Apache文件解析漏洞涉及到一个解析文件的特性。Apache默认一个文件可以有多个以点.分割的后缀，当右边的后缀名无法识别，则继续向左识别；因此可以用于文件上传来绕过黑名单导致getshell。
二、正则过滤解析漏洞（ cve-2017-15715）
漏洞原理： apache这次解析漏洞的根本原因就是这个 $，正则表达式中，我们都知道用 来 匹 配 字 符 串 结 尾 位 置 ， 我 们 来 看 看 [ 菜 鸟 教 程 ] ( h t t p : / / w w w . r u n o o b . c o m / r e g e x p / r e g e x p − s y n t a x . h t m l ) 中 对 正 则 表 达 符 ‘ 用来匹配字符串结尾位置，我们来看看 [菜鸟教程]( http://www.runoob.com/regexp/regexp-syntax.html ) 中对正则表达符`用来匹配字符串结尾位置，我们来看看[菜鸟教程](http://www.runoob.com/regexp/regexp−syntax.html)中对正则表达符‘`的解释：

匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 ‘\n’ 或 ‘\r’。要匹配 $ 字符本身，请使用 \$。
1
所以问题就来了，在设置了 RegExp 对象的 Multiline 属性的条件下，$还会匹配到字符串结尾的换行符。所以如果在上传时，添加一个换行符也能呗正常解析，并且能够绕过系统的黑名单检测。所以理论上只要使用正则来匹配文件后缀名，就有可能存在该漏洞。

漏洞产生条件：

获取文件名时不能用$_FILES['file']['name']，因为他会自动把换行去掉，这一点有点鸡肋
默认的Apache配置即可利用，因为默认Apache配置就使用了<FileMatch>
